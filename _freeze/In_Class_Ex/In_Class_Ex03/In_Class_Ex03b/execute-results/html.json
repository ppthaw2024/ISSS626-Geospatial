{
  "hash": "47c2b57780f9a7947a2b0306ce205a40",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Exercise 3b: ACRA\"\nauthor: \"Pwint Phoo Thaw\"\ndate: \"September 12, 2025\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf,tidyverse,\n               tmap, httr)\n```\n:::\n\n\n\n**Importing ACRA Data**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfolder_path <- \"data/aspatial/acra\"\nfile_list <- list.files(path=folder_path,\n                        pattern = \"^ACRA*.*\\\\.csv$\",\n                        full.names = TRUE)\n\nacra_data <- file_list %>%\n  map_dfr(read_csv)\n```\n:::\n\n\n\n**Saving ACRA data**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(acra_data,\n          \"data/rds/acra_data.rds\")  ##makesure to use underscore write\n```\n:::\n\n\n\n**Tidying ACRA data (56111 is for restaurants)**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### select target businesess, derive year, tidy postal code for geo coding and...\n\nbiz_56111 <- acra_data %>%\n  select(1:24) %>%\n  filter(primary_ssic_code == 56111) %>%\n  rename(date = registration_incorporation_date) %>%  ###rename long name of reg date\n  mutate(date = as.Date(date),\n         YEAR = year(date),\n         MONTH_NUM = month(date), # for sttv purpose\n         MONTH_ABBR = month(date,\n                           label = TRUE,\n                           abbr = TRUE)) %>% ###from hands_on 4, need to provide month in numerical form, visualization purpose\n  mutate(\n    postal_code = str_pad(postal_code,\n    width = 6, side = \"left\", pad = \"0\")) %>% ###alawys 6 digits for SG, 5 digits for chinatown area and have to fill 0, must make sure character field\n          filter(YEAR == 2025)\n\n\n### need to continue with filering until June based on Problem statement\n```\n:::\n\n\n\n**Geocoding (for finding X,Y coordinates)**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npostcodes <- unique(biz_56111$postal_code)\n\nurl <- \"https://onemap.gov.sg/api/common/elastic/search\"  ##API without paying\n\nfound <- data.frame()\nnot_found <- data.frame(postcode = character())\n\nfor (pc in postcodes) {\n  query <- list(\n    searchVal = pc,\n    returnGeom = \"Y\",\n    getAddrDetails = \"Y\",\n    pageNum = \"1\"\n  )\n\n###converting to data frame\nres <- GET(url, query = query)\njson <- content(res)\n\nif (json$found != 0) {\n  df <- as.data.frame(json$results, stringsAsFactors = FALSE)\n  df$input_postcode <- pc\n  found <- bind_rows(found, df)\n  } else {\n  not_found <- bind_rows(not_found, data.frame(postcode = pc))\n  }\n}\n```\n:::\n\n\n\nAppending the location information (join it back with 56111 right one with new geo_coded postal_code\n\n2 columns in meter, 2 columns in Lon and Lat\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbiz_56111 = biz_56111 %>%\n   left_join(found,\n             by = c('postal_code' = 'POSTAL'))\n```\n:::\n\n\n\n**Converting into SF data frame**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbiz_56111_sf <- st_as_sf(biz_56111,\n                         coords = c(\"X\", \"Y\"),\n                         crs = 3414)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}