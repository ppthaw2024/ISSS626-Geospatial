---
title: "Hands-on Exercise 01: Geosptial Data Science with R"
author: "Pwint Phoo Thaw"
date-modified: "last-modified"
execute:
  echo: true
  eva: true
  warning: false
  freeze: true
---

## 1.1 Learning Outcome

Geospatial Data Science is a process of importing, wrangling, integrating, and processing geographically referenced data sets. In this hands-on exercise, how to perform geospatial data science tasks in R by using **sf** package will be learnt.

## 1.2 Data Acquisition

In this hands-on exercise, I'm going to extract the necessary data sets from the following sources:

-   Master Plan 2014 Subzone Boundary (Web) from [data.gov.sg](https://data.gov.sg/)

-   Pre-Schools Location from [data.gov.sg](https://data.gov.sg/)

-   Cycling Path from [LTADataMall](https://www.mytransport.sg/content/mytransport/home/dataMall.html)

-   Latest version of Singapore Airbnb listing data from [Inside Airbnb](http://insideairbnb.com/get-the-data.html)

### **1.2.1 Extracting the geospatial data sets**

In the `Hands-on_Ex01` folder, create a sub-folder called `data`. Then, inside the `data` sub-folder, create two sub-folders and name them `geospatial` and `aspatial` respectively.

Place `Master Plan 2014 Subzone Boundary (Web)`, `Pre-Schools Location` and `Cycling Path` zipped files into `geospatial` sub-folder and unzipped them. Copy the unzipped files from their respective sub-folders and place them inside `geospatial` sub-folder.

### **1.2.2 Extracting the aspatial data set**

Now, the downloaded `listing` data file will be extracted. At `Downloads` folder, cut and paste `listing.csv` into `aspatial` sub-folder.

## **1.3 Getting Started**

In this hands-on exercise, two R packages will be used. They are:

-   **sf** for importing, managing, and processing geospatial data, and

-   **tidyverse** for performing data science tasks such as importing, wrangling and visualising data.

```{r}
pacman::p_load(sf, tidyverse)

```

## **1.4 Importing Geospatial Data**

In this section, it is to import the following geospatial data into R by using [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package:

-   `MP14_SUBZONE_WEB_PL`, a polygon feature layer in ESRI shapefile format,

-   `CyclingPath`, a line feature layer in ESRI shapefile format, and

-   `PreSchool`, a point feature layer in kml file format.

### **1.4.1 Importing polygon feature data in shapefile format**

```{r}
mpsz = st_read(dsn = "Data/geospatial", 
                  layer = "MP14_SUBZONE_WEB_PL")
```

### **1.4.2 Importing polyline feature data in shapefile form**

```{r}
cyclingpath = st_read(dsn = "Data/geospatial", 
                         layer = "CyclingPathGazette")
```

### **1.4.3 Importing GIS data in kml format**

```{r}
preschool = st_read("Data/geospatial/PreSchoolsLocation.kml")

```

## **1.5 Checking the Content of A Simple Feature Data Frame**

### **1.5.1 Working with *st_geometry()***

```{r}
st_geometry(mpsz)
```

### **1.5.2 Working with glimpse()**

```{r}
glimpse(mpsz)
```

### **1.5.3 Working with *head()***

```{r}
head(mpsz, n=5)  
```

## **1.6 Plotting the Geospatial Data**

```{r}
plot(mpsz)
```

The default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum as shown above. We can, however, choose to plot only the geometry by using the code chunk below.

```{r}
plot(st_geometry(mpsz))
```

Alternatively, we can also choose the plot the sf object by using a specific attribute as shown in the code chunk below.

```{r}
plot(mpsz["PLN_AREA_N"])
```

Now, let us plot the preschool layer ontop of the mpsz layer by using the code chunk below.

```{r}
plot(st_geometry(mpsz))
plot(st_geometry(preschool), 
     add = TRUE)
```

## **1.7 Working with Projection**

Map projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system.

In this section, you will learn how to project a simple feature data frame from one coordinate system to another coordinate system. The technical term of this process is called **projection transformation**.

### **1.7.1 Assigning EPSG code to a simple feature data frame**

This is an example the coordinate system of `mpsz` simple feature data frame by using *st_crs()* of *sf* package as shown in the code chunk below.

```{r}
st_crs(mpsz)
```

Although `mpsz` data frame is projected in svy21 but when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be [3414](https://epsg.io/3414).

In order to assign the correct EPSG code to `mpsz` data frame, *st_set_crs()* of **sf** package is used as shown in the code chunk below.

```{r}
mpsz <- st_set_crs(mpsz, 3414)
```

Now, let us check the CSR again by using the code chunk below.

```{r}
st_crs(mpsz)
```

### **1.7.2 Transforming the projection of preschool from wgs84 to svy21.**

Let us take preschool simple feature data frame as an example. The print below reveals that it is in wgs84 coordinate system.

![This is a scenario that *st_set_crs()* is not appropriate and *st_transform()* of sf package should be used. This is because we need to reproject `preschool` from one coordinate system to another coordinate system mathemetically.](images/clipboard-1255963468.png)

```{r}
preschool <- st_transform(preschool, 
                              crs = 3414)

```

```{r}
st_geometry(preschool)
```

Notice that it is in svy21 projected coordinate system now. Furthermore, if you refer to *Bounding box:*, the values are greater than 0-360 range of decimal degree commonly used by most of the geographic coordinate systems.

Now, let us try to plot the preschool layer ontop of mpsz layer again by using the similar code chunk you used earlier.

```{r}
plot(st_geometry(mpsz))
plot(st_geometry(preschool), add = TRUE)
```

## **1.8 Importing and Converting An Aspatial Data**

Inside Airbnb. We call this kind of data aspatial data. This is because it is not a geospatial data but among the data fields, there are two fields that capture the x- and y-coordinates of the data points.

In this section, you will learn how to import an aspatial data into R environment and save it as a tibble data frame. Next, you will convert it into a simple feature data frame.

### **1.8.1 Importing the aspatial data**

```{r}
listings <- read_csv("Data/aspatial/listings.csv")
```

```{r}
list(listings) 
```

Two useful fields we are going to use in the next phase are `latitude` and `longitude`. Note that they are in decimal degree format. As a best guess, we will assume that the data is in **wgs84** Geographic Coordinate System.

### **1.8.2 Creating a simple feature data frame from an aspatial data frame**

```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

```{r}
glimpse(listings_sf)

```

```{r}
plot(st_geometry(mpsz))
plot(st_geometry(listings_sf), 
     add = TRUE)
```

## **1.9 Geoprocessing with sf package**

### **1.9.1 Use case 1: Land acquisition analysis**

#### 1.9.1.1 The scenario

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the existing cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

#### 1.9.1.2 The solution

Firstly, [`st_buffer()`](https://r-spatial.github.io/sf/reference/geos_unary.html) of **sf** package is used to compute the 5-meter buffers around cycling paths.

```{r}
buffer_cycling <- st_buffer(
  cyclingpath, dist=5, nQuadSegs = 30)
```

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

```{r}
buffer_cycling <- buffer_cycling %>%
  mutate(AREA = st_area(geometry))
```

```{r}
sum(buffer_cycling$AREA)
```

We can also create a plot showing the buffer by a selected planning subzone.

Assuming that we are interested on the land acquisition in Tampines West planning subzone.

Firstly, `filter()` of dplyr package will be used to extract polygon feature of Tampines West by using the code chunk below.

```{r}
mpsz_selected <- mpsz %>%
  filter(SUBZONE_N == "TAMPINES WEST") 

```

Next, `st_intersection()` of **sf** package will be used to clip cycling buffers within Tampines West planning subzone.

```{r}
st_crs(buffer_cycling) 
```

```{r}
buffer_cycling_tf <- st_transform(buffer_cycling, 
                              crs = 3414)
```

```{r}
st_crs(buffer_cycling_tf) 
```

```{r}
st_crs(mpsz_selected)
```

```{r}
mpsz_selected_tf <- st_transform(mpsz_selected, 
                              crs = 3414)
```

```{r}
buffer_cycling_selected <- st_intersection(
  buffer_cycling_tf, mpsz_selected_tf)
```

```{r}
plot(buffer_cycling_selected)
```

### **1.9.2 Use case 2: To determine the number of pre-schools by planning subzone**

#### 1.9.2.1 The scenario

The authority requires a count of pre-schools for each planning subzone to support forward planning. Using R and the sf package, perform the necessary geoprocessing to compute these counts and present the results clearly.

#### 1.9.2.2 The solution

The code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using [`st_intersects()`](https://r-spatial.github.io/sf/reference/geos_binary_pred.html). Next, [`length()`](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/length) of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.

```{r}
mpsz$`PreSch Count`<- lengths(st_intersects(mpsz, preschool))
```

```{r}
summary(mpsz$`PreSch Count`)
```

To list the planning subzone with the most number of pre-school, the [*top_n()*](https://dplyr.tidyverse.org/reference/top_n.html) of **dplyr** package is used as shown in the code chunk below.

```{r}
top_n(mpsz, 1, `PreSch Count`)
```

```{r}
mpsz$Area <- mpsz %>%
  st_area()
```

```{r}
mpsz <- mpsz %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

Firstly, we will plot a histogram to reveal the distribution of `PreSch Density`. Conventionally, *hist()* of R Graphics will be used as shown in the code chunk below.

```{r}
hist(mpsz$`PreSch Density`)
```

In the code chunk below, appropriate **ggplot2** functions will be used.

```{r}
ggplot(data=mpsz, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning subzones with a single pre-school, on the other hand, \nthere are seven planning subzones with at least 30 or more pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

In the code chunk below, appropriate ggplot2 functions are used to plot a scatterplot showing the relationship between Pre-school Density and Pre-school Count.

```{r}
ggplot(data=mpsz, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```
