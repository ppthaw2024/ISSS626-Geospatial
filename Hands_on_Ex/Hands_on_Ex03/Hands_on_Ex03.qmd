---
title: "Hands-on Exercise 03:  Spatio-Temporal Point Patterns Analysis"
author: "Pwint Phoo Thaw"
date-modified: "last-modified"
execute:
  echo: true
  eva: true
  warning: false
  freeze: true
---

## **6.1 Overview**

A spatio-temporal point process (also called space-time or spatial-temporal point process) is a random collection of points, where each point represents the time and location of an event. Examples of events include incidence of disease, sightings or births of a species, or the occurrences of fires, earthquakes, lightning strikes, tsunamis, or volcanic eruptions.

**6.2 Learning Outcome**

### **6.2.1 The research questions**

The specific questions we would like to answer are:

-   are the locations of forest fire in Kepulauan Bangka Belitung spatial and spatio-temporally independent?

-   if the answer is NO, where and when the observed forest fire locations tend to cluster?

## **6.3 The data**

For the purpose of this exercise, two data sets will be used, they are:

-   *forestfires*, a csv file provides locations of forest fire detected from the Moderate Resolution Imaging Spectroradiometer (MODIS) sensor data. The data are downloaded from [Fire Information for Resource Management System](https://firms.modaps.eosdis.nasa.gov/download/). For the purpose of this exercise, only forest fires within Kepulauan Bangka Belitung will be used.

-   *Kepulauan_Bangka_Belitung*, an ESRI shapefile showing the sub-district (i.e. [kelurahan](https://en.wikipedia.org/wiki/Villages_of_Indonesia)) boundary of Kepulauan Bangka Belitung. The data set was downloaded from [Indonesia Geospatial](https://www.indonesia-geospasial.com/2023/05/download-shapefile-batas-administrasi.html) portal. The original data covers the whole Indonesia. For the purpose of this exercise, only sub-districts within Kepulauan Bangka Belitung are extracted.

## **6.4 Installing and Loading the R packages**

```{r}
pacman::p_load(sf, terra, spatstat, sparr, tmap, tidyverse)
```

## **6.5 Importing and Preparing Study Area**

```{r}
kbb <- st_read(dsn="data",
               layer = "Kepulauan_Bangka_Belitung") 
```

```{r}
kbb_sf <- st_read(dsn="data",
               layer = "Kepulauan_Bangka_Belitung") %>%
  st_union() %>%
  st_zm(drop = TRUE, what = "ZM") %>%
  st_transform(crs = 32748)
```

### **6.5.2 Converting OWIN**

Next, `as.owin()` is used to convert *kbb* into an **owin** object.

```{r}
kbb_owin <- as.owin(kbb_sf)
kbb_owin
```

```{r}
class(kbb_owin)
```

## **6.6 Importing and Preparing Forest Fire data**

```{r}
fire_sf <- read_csv("data/forestfires.csv") %>%
  st_as_sf(coords = c("longitude", "latitude"),
                       crs = 4326) %>%
  st_transform(crs = 32748)
```

Because **ppp** object only accept numerical or character as mark. The code chunk below is used to convert data type of *acq_date* to numeric.

```{r}
fire_sf <- fire_sf %>% 
  mutate(DayofYear = yday(acq_date)) %>%
  mutate(Month_num = month(acq_date)) %>%
  mutate(Month_fac = month(acq_date, 
                           label = TRUE, 
                           abbr = FALSE))
```

## **6.7 Visualising the Fire Points**

### **6.7.1 Overall plot**

```{r}
tm_shape(kbb_sf)+
  tm_polygons() +
tm_shape(fire_sf) +
  tm_dots()
```

### **6.7.2 Visuaising geographic distribution of forest fires by month**

```{r}
tm_shape(kbb_sf)+
  tm_polygons() +
tm_shape(fire_sf) +
  tm_dots(size = 0.1) +
tm_facets(by="Month_fac", 
            free.coords=FALSE, 
            drop.units = TRUE)
```

## **6.8 Computing STKDE by Month**

In this section, it is to show how to compute STKDE by using [`spattemp.density()`](https://tilmandavies.github.io/sparr/reference/spattemp.density.html) of **sparr** package. Before using the function, it is highly recommended to read the function’s reference guide in detail in order to understand the input data requirements and the output object generated.

### **6.8.1 Extracting forest fires by month**

The code chunk below is used to remove the unwanted fields from *fire_sf* sf data.frame. This is because `as.ppp()` only need the mark field and geometry field from the input sf data.frame.

```{r}
fire_month <- fire_sf %>% 
  select(Month_num)

```

### **6.8.2 Creating ppp**

The code chunk below is used to derive a **ppp** object called *fire_month* from *fire_month* sf data.frame.

```{r}
fire_month_ppp <- as.ppp(fire_month)
fire_month_ppp
```

```{r}
summary(fire_month_ppp)
```

```{r}
any(duplicated(fire_month_ppp))
```

### **6.8.3 Including Owin object**

The code chunk below is used to combine *origin_am_ppp* and *am_owin* objects into one.

```{r}
fire_month_owin <- fire_month_ppp[kbb_owin]
summary(fire_month_owin)
```

```{r}
plot(fire_month_owin)
```

### **6.8.4 Computing Spatio-temporal KDE**

Next, `spattemp.density()` of sparr package is used to compute the STKDE.

```{r}
st_kde <- spattemp.density(fire_month_owin)
summary(st_kde)
```

### **6.8.5 Plotting the spatio-temporal KDE object**

In the code chunk below, `plot()` of R base is used to the KDE for between July 2023 - December 2023.

```{r}
tims <- c(7,8,9,10,11,12)
par(mfcol=c(2,3))
for(i in tims){ 
  plot(st_kde, i, 
       override.par=FALSE, 
       fix.range=TRUE, 
       main=paste("KDE at month",i))
}
```

## **6.9 Computing STKDE by Day of Year**

In this section, you will learn how to computer the STKDE of forest fires by day of year.

### **6.9.1 Creating ppp object**

In the code chunk below, DayofYear field is included in the output ppp object.

```{r}
fire_yday_ppp <- fire_sf %>% 
  select(DayofYear) %>%
  as.ppp()
```

### **6.9.2 Including Owin object**

Next, code chunk below is used to combine the ppp object and the owin object.

```{r}
fire_yday_owin <- fire_yday_ppp[kbb_owin]
summary(fire_yday_owin)

```

### **6.9.3** 

```{r}
kde_yday <- spattemp.density(
  fire_yday_owin)
summary(kde_yday)
```

```{r}
plot(kde_yday)
```

## **6.10 Computing STKDE by Day of Year: Improved method**

One of the nice function provides in sparr package is `BOOT.spattemp()`. It support bandwidth selection for standalone spatiotemporal density/intensity based on bootstrap estimation of the MISE, providing an isotropic scalar spatial bandwidth and a scalar temporal bandwidth.

Code chunk below uses `BOOT.spattemp()` to determine both the spatial bandwidth and the scalar temporal bandwidth.

```{r}
set.seed(1234)
BOOT.spattemp(fire_yday_owin) 
```

### **6.10.1 Computing spatio-temporal KDE**

Now, the STKDE will be derived by using h and lambda values derive in previous step.

```{r}
kde_yday <- spattemp.density(fire_yday_owin,
                             h = 9000,
                             lambda = 19)
summary(kde_yday)
```

### **6.10.2 Plotting the output spatio-temporal KDE**

Last, `plot()` of **sparr** package is used to plot the output as shown below.

```{r}
plot(kde_yday)
```
